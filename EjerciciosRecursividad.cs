//!--------------------------------------------Recursividad--------------------------------------------

/*

Realizado por: Jorge Barreto
Fecha de creaci칩n: 1/11/2024
ID: 000484006
OOP

*/
/*
1- Crea una funci칩n "Potencia" que reciba dos par치metros: n칰mero y potencia.
El resultado debe ser el n칰mero elevado a esa potencia. Por ejemplo: Potencia(2,3) = 8   porque 2*2*2 = 8
Deben usar recursividad.
Solo se puede usar multiplicaci칩n simple.
*/

using System;

class Potencia
{
    static void Main()
    {
        Console.WriteLine(Potencia(2, 3));
    }

    static int Potencia(int numero, int potencia)
    {
        if (potencia == 0)
        {
            return 1;
        }
        return numero * Potencia(numero, potencia - 1);
    }
}



/*
2- Crea una funci칩n factorial.
Dado un n칰mero, calcular su factorial. (游땐)
El factorial de un n칰mero se representa con un !
Por lo tanto, el factorial de n ser칤a n!
n! = n * (n-1) * (n-2) * ... * 1
3! = 3 * 2 * 1 => 6 
*/

class FuncionFactorial
{
    static void Main()
    {
        Console.WriteLine(Factorial(3));
    }

    static int Factorial(int numero)
    {
        if (numero == 0)
        {
            return 1;
        }
        return numero * Factorial(numero - 1);
    }
}

/*
3- Crea una funci칩n que reverse un texto: Reverse("hola") = aloh
No se debe alterar el texto inicial, sino retornar uno nuevo.
Se debe usar recursividad. 
Ap칩yense del m칠todo Substring.
Tip: Agarrar el primer caracter del texto y sumarlo al final de los caracteres restantes:
Hola -> ola + h. (primer paso)
*/
class Reverso_creo

{
    static void Main()
    {
        Console.WriteLine(Reverse("hola"));
    }

    static string Reverse(string texto)
    {
        if (texto.Length == 0)
        {
            return "";
        }
        return texto.Substring(texto.Length - 1) + Reverse(texto.Substring(0, texto.Length - 1));
    }
}

/*
4- Crea una funci칩n que valide si una palabra es o no un pal칤ndromo.
Un pal칤ndromo es una palabra que se escribe igual al derecho y al rev칠s.
ana
arenera
acurruca
reconocer

La funci칩n debe retornar true o false dependiendo de si la palabra es o no un pal칤ndromo.
*/

class paliondromo
{
    static void Main()
    {
        Console.WriteLine(EsPalindromo("arenera"));
    }

    static bool EsPalindromo(string palabra)
    {
        if (palabra.Length <= 1)
        {
            return true;
        }
        if (palabra[0] != palabra[palabra.Length - 1])
        {
            return false;
        }
        return EsPalindromo(palabra.Substring(1, palabra.Length - 2));
    }
}

/*
5- Crea una funci칩n que encuentre el n칰mero m치s grande de una lista de n칰meros.
Necesito iterar sobre la lista y estar comparando la posici칩n actual con la siguiente.
Adem치s, debo tener una variable que est칠 almacenando el valor mayor de cada comparaci칩n.
Se necesitan: La lista de n칰meros, el valor m치ximo actual y el 칤ndice.

Se crear치n dos funciones:
- Una se llama solo con la lista de n칰meros y es encargada de invocar a la funci칩n que realiza la iteraci칩n
- La otra se encarga de la comparaci칩n de valores y de iterar sobre ella misma.

Reto: Creen la primera funci칩n como una variable de tipo funci칩n.
*/


using System.Collections.Generic; // Se me olvid칩 agregar esta libreria.


class El_nUmero_grde 
{
    static void Main()
    {
        List<int> numeros = new List<int> { 1, 5, 8, 10, 12 };
        
        
        Func<List<int>, int> encontrarMayor = (lista) => {
            return NumeroMasGrande(lista, lista[0], 0);
        };
        
        Console.WriteLine(encontrarMayor(numeros));
    }

    static int NumeroMasGrande(List<int> numeros, int valorMaximo, int indice)
    {
        //Aqui tuve multiples problemas al momento de hacer la recursividad y casi que no lo hago
        if (indice == numeros.Count - 1)
        {
            return valorMaximo;
        }
        
        
        if (numeros[indice + 1] > valorMaximo)
        {
            valorMaximo = numeros[indice + 1];
        }
        
        return NumeroMasGrande(numeros, valorMaximo, indice + 1);
    }
}


//!--------------------------------------------Funciones de primera clase--------------------------------------------

/*
6- Crea una funci칩n, factory, que toma un n칰mero como par치metro y retorna otra funci칩n.

La funci칩n retornada debe tomar una lista de n칰meros como par치metro, y retornar una lista con esos n칰meros multiplicados por el numero que se le di칩 a la primera funci칩n.

Aqu칤 usaremos linq. Select.
*/


using System.Linq; //Se agrega esta libreria, tambien se me habia olvidado 

class Funcion 
{
    static void Main() 
    {
        
        Func<int, Func<List<int>, List<int>>> factory = numero => 
            numeros => numeros.Select(n => n * numero).ToList();

        
        Func<List<int>, List<int>> multiplicarPor2 = factory(10);

        
        List<int> numeros = new List<int> { 1, 2, 3, 4, 5 };

        
        List<int> resultado = multiplicarPor2(numeros);

        
        Console.WriteLine(string.Join(", ", resultado));
    }
}